import 'dart:math';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:ramadan_kitchen_management/core/utils/app_colors.dart';
import 'package:ramadan_kitchen_management/features/manage_cases/logic/cases_cubit.dart';
import 'package:ramadan_kitchen_management/features/manage_cases/logic/cases_state.dart';
import 'package:shimmer/shimmer.dart';

class StatisticsScreen extends StatelessWidget {
  const StatisticsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: BlocBuilder<CasesCubit, CasesState>(
        builder: (context, state) {
          if (state is CasesLoading) {
            return const Center(
                child:
                    CircularProgressIndicator(color: AppColors.primaryColor));
          }
          if (state is CasesError) {
            return Center(child: Text(state.message));
          }
          if (state is CasesLoaded) {
            return _AdminStatisticsView(cases: state.cases);
          }
          return const Center(child: Text('No statistics available'));
        },
      ),
    );
  }
}

class _AdminStatisticsView extends StatefulWidget {
  final List<Map<String, dynamic>> cases;
  const _AdminStatisticsView({required this.cases});

  @override
  State<_AdminStatisticsView> createState() => _AdminStatisticsViewState();
}

class _AdminStatisticsViewState extends State<_AdminStatisticsView>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          decoration: BoxDecoration(
            color: Colors.grey[100],
            borderRadius: BorderRadius.circular(16),
          ),
          child: TabBar(
            unselectedLabelColor: AppColors.greyColor,
            splashFactory: NoSplash.splashFactory,
            overlayColor: WidgetStateProperty.resolveWith<Color?>(
                (Set<WidgetState> states) {
              return states.contains(WidgetState.focused)
                  ? null
                  : Colors.transparent;
            }),
            dividerColor: Colors.transparent,
            labelStyle: TextStyle(
                color: AppColors.primaryColor,
                fontFamily: 'DIN',
                fontSize: 16,
                fontWeight: FontWeight.w500),
            indicatorColor: AppColors.primaryColor,
            controller: _tabController,
            tabs: const [
              Tab(text: 'الإحصائيات العامة'),
              Tab(text: 'التفاصيل اليومية')
            ],
          ),
        ),
        Expanded(
          child: TabBarView(
            controller: _tabController,
            children: [
              _StatisticsContent(cases: widget.cases),
              _TotalStatisticsContent(),
            ],
          ),
        ),
      ],
    );
  }
}

class _StatisticsContent extends StatefulWidget {
  final List<Map<String, dynamic>> cases;
  const _StatisticsContent({required this.cases});

  @override
  State<_StatisticsContent> createState() => _StatisticsContentState();
}

class _StatisticsContentState extends State<_StatisticsContent> {
  late int totalIndividuals;
  late int totalCheckedIndividuals;
  late int totalUndistributed;
  late double progressPercentage;

  @override
  void initState() {
    super.initState();
    _calculateStatistics();
  }

  void _calculateStatistics() {
    totalIndividuals = widget.cases.fold(
        0,
        (sum, e) =>
            sum + (e['عدد الأفراد'] is int ? e['عدد الأفراد'] as int : 0));
    totalCheckedIndividuals = widget.cases.fold(
        0,
        (sum, e) => e['جاهزة'] == true
            ? sum + (e['عدد الأفراد'] is int ? e['عدد الأفراد'] as int : 0)
            : sum);
    totalUndistributed = totalIndividuals - totalCheckedIndividuals;
    progressPercentage = totalIndividuals > 0
        ? (totalCheckedIndividuals / totalIndividuals) * 100
        : 0.0;
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children: [
          Container(
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                    color: Colors.grey.withOpacity(0.1),
                    spreadRadius: 8,
                    blurRadius: 12,
                    offset: const Offset(0, 4))
              ],
            ),
            child: Column(
              children: [
                SizedBox(
                  height: 220,
                  child: PieChart(
                    PieChartData(
                      sections: [
                        PieChartSectionData(
                          value: totalCheckedIndividuals.toDouble(),
                          color: AppColors.customColors[0],
                          radius: 45,
                          title: '$totalCheckedIndividuals',
                          titleStyle: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.white),
                        ),
                        PieChartSectionData(
                          value: totalUndistributed.toDouble(),
                          color: Colors.blue[100],
                          radius: 45,
                          title: '$totalUndistributed',
                          titleStyle: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.grey[800]),
                        ),
                      ],
                      centerSpaceRadius: 56,
                      sectionsSpace: 2,
                      startDegreeOffset: -90,
                      borderData: FlBorderData(show: false),
                      centerSpaceColor: Colors.transparent,
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Row(
                      children: [
                        Container(
                            width: 16,
                            height: 16,
                            decoration: BoxDecoration(
                                color: AppColors.primaryColor,
                                shape: BoxShape.circle)),
                        const SizedBox(width: 8),
                        Text('تم التسليم',
                            style: TextStyle(
                                color: Colors.grey[700],
                                fontWeight: FontWeight.w500)),
                      ],
                    ),
                    const SizedBox(width: 24),
                    Row(
                      children: [
                        Container(
                            width: 16,
                            height: 16,
                            decoration: BoxDecoration(
                                color: Colors.blue[100]!,
                                shape: BoxShape.circle)),
                        const SizedBox(width: 8),
                        Text('قيد الانتظار',
                            style: TextStyle(
                                color: Colors.grey[700],
                                fontWeight: FontWeight.w500)),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
          const SizedBox(height: 32),
          GridView(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
                childAspectRatio: 1.0,
                mainAxisSpacing: 8,
                crossAxisSpacing: 8),
            padding: const EdgeInsets.only(bottom: 16),
            children: [
              _buildMetricCard(
                  title: 'إجمالي الأفراد',
                  value: totalIndividuals,
                  icon: Icons.people_alt_rounded,
                  color: Colors.purple.shade200),
              _buildMetricCard(
                  title: 'تم التوزيع',
                  value: totalCheckedIndividuals,
                  icon: Icons.check_circle_rounded,
                  color: Colors.green),
              _buildMetricCard(
                  title: 'النسبة المئوية',
                  value: '${progressPercentage.toStringAsFixed(1)}%',
                  icon: Icons.percent_rounded,
                  color: Colors.blue.shade400),
              _buildMetricCard(
                  title: 'المتبقي',
                  value: totalUndistributed,
                  icon: Icons.pending_actions_rounded,
                  color: Colors.orange.shade800),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMetricCard({
    required String title,
    required dynamic value,
    required IconData icon,
    required Color color,
  }) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 2,
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: color.withValues(alpha: 0.1),
            ),
            child: Center(
              child: Icon(
                icon,
                color: color,
                size: 24,
              ),
            ),
          ),
          const SizedBox(height: 16),
          Column(
            children: [
              Center(
                child: Text(
                  '$value',
                  style: TextStyle(
                    fontSize: 35,
                    fontWeight: FontWeight.bold,
                    color: color,
                  ),
                ),
              ),
              const SizedBox(height: 4),
              Text(
                title,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w500,
                  color: Colors.grey[600],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

class _TotalStatisticsContent extends StatefulWidget {
  const _TotalStatisticsContent();

  @override
  State<_TotalStatisticsContent> createState() =>
      __TotalStatisticsContentState();
}

class __TotalStatisticsContentState extends State<_TotalStatisticsContent> {
  int _totalIndividuals = 0;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadDonationData();
  }

  Future<void> _loadDonationData() async {
    try {
      final now = DateTime.now();
      final startOfDay = DateTime(now.year, now.month, now.day);

      final snapshot = await FirebaseFirestore.instance
          .collection('donations')
          .where('created_at', isGreaterThanOrEqualTo: startOfDay)
          .get();

      if (snapshot.docs.isNotEmpty) {
        // Get the latest document for today
        final latestDoc = snapshot.docs.first;
        final dailyValue = latestDoc['numberOfIndividuals'] as int? ?? 0;

        // Get historical data (previous days)
        final historicalSnapshot = await FirebaseFirestore.instance
            .collection('donations')
            .where('created_at', isLessThan: startOfDay)
            .get();

        // Sum historical values
        int historicalTotal = historicalSnapshot.docs.fold(
          0,
          (sum, doc) => sum + (doc['numberOfIndividuals'] as int? ?? 0),
        );

        setState(() {
          _totalIndividuals = historicalTotal + dailyValue;
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _isLoading
          ? _buildShimmerLoading()
          : Padding(
              padding: const EdgeInsets.all(20.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // Animated food plate icon
                  TweenAnimationBuilder(
                    tween: Tween<double>(begin: 0, end: 1),
                    duration: const Duration(seconds: 1),
                    builder: (context, value, child) {
                      return Transform.scale(
                        scale: value,
                        child: child,
                      );
                    },
                    child: Container(
                      width: 120,
                      height: 120,
                      decoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Colors.orange, Colors.deepOrange],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.orange.withOpacity(0.4),
                            blurRadius: 20,
                            spreadRadius: 5,
                          )
                        ],
                      ),
                      child: const Icon(
                        Icons.restaurant,
                        size: 60,
                        color: Colors.white,
                      ),
                    ),
                  ),

                  const SizedBox(height: 30),

                  // Animated counter with decorative elements
                  Stack(
                    alignment: Alignment.center,
                    children: [
                      Positioned(
                        child: CustomPaint(
                          painter: _RadialPainter(),
                          size: const Size(200, 200),
                        ),
                      ),
                      Column(
                        children: [
                          Text(
                            'إجمالي الأفراد',
                            style: TextStyle(
                              fontSize: 22,
                              fontWeight: FontWeight.bold,
                              color: Colors.grey[700],
                              fontFamily: 'NotoNaskhArabic',
                            ),
                          ),
                          AnimatedCount(
                            count: _totalIndividuals,
                            duration: const Duration(seconds: 1),
                            style: const TextStyle(
                              fontSize: 48,
                              fontWeight: FontWeight.bold,
                              color: Colors.deepOrange,
                            ),
                          ),
                          Text(
                            'تم إطعامهم',
                            style: TextStyle(
                              fontSize: 18,
                              color: Colors.grey[600],
                              fontFamily: 'NotoNaskhArabic',
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),

                  const SizedBox(height: 30),

                  // Progress wave animation
                  Container(
                    height: 20,
                    width: 200,
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(10),
                      color: Colors.grey[200],
                    ),
                    child: Stack(
                      children: [
                        LayoutBuilder(
                          builder: (context, constraints) {
                            return AnimatedContainer(
                              duration: const Duration(seconds: 1),
                              width: constraints.maxWidth *
                                  (_totalIndividuals / 1000),
                              decoration: BoxDecoration(
                                gradient: const LinearGradient(
                                  colors: [Colors.orange, Colors.deepOrange],
                                ),
                                borderRadius: BorderRadius.circular(10),
                              ),
                            );
                          },
                        ),
                        Center(
                          child: Text(
                            '${(_totalIndividuals / 1000 * 100).toStringAsFixed(1)}% من الهدف',
                            style: const TextStyle(
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
    );
  }

  Widget _buildShimmerLoading() {
    return Shimmer.fromColors(
      baseColor: Colors.grey[300]!,
      highlightColor: Colors.grey[100]!,
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 120,
            height: 120,
            decoration: const BoxDecoration(
              color: Colors.white,
              shape: BoxShape.circle,
            ),
          ),
          const SizedBox(height: 30),
          Container(
            width: 200,
            height: 100,
            color: Colors.white,
          ),
          const SizedBox(height: 30),
          Container(
            width: 200,
            height: 20,
            color: Colors.white,
          ),
        ],
      ),
    );
  }
}

class _RadialPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.orange.withOpacity(0.1)
      ..style = PaintingStyle.stroke
      ..strokeWidth = 2;

    for (int i = 0; i < 8; i++) {
      canvas.drawArc(
        Rect.fromCenter(
          center: size.center(Offset.zero),
          width: size.width - i * 15,
          height: size.height - i * 15,
        ),
        0,
        pi * 1.5, // Changed from π to pi
        false,
        paint..strokeWidth = 2 - (i * 0.2),
      );
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}

class AnimatedCount extends ImplicitlyAnimatedWidget {
  final int count;
  final TextStyle? style;

  const AnimatedCount({
    super.key,
    required this.count,
    required this.style,
    required super.duration,
  });

  @override
  ImplicitlyAnimatedWidgetState<ImplicitlyAnimatedWidget> createState() =>
      _AnimatedCountState();
}

class _AnimatedCountState extends AnimatedWidgetBaseState<AnimatedCount> {
  IntTween? _countTween;

  @override
  void forEachTween(TweenVisitor<dynamic> visitor) {
    _countTween = visitor(
      _countTween,
      widget.count,
      (dynamic value) => IntTween(begin: value as int),
    ) as IntTween;
  }

  @override
  Widget build(BuildContext context) {
    return Text(
      '${_countTween?.evaluate(animation) ?? 0}',
      style: widget.style,
    );
  }
}
